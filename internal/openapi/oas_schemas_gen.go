// Code generated by ogen, DO NOT EDIT.

package openapi

import (
	"time"

	"github.com/go-faster/errors"
)

type BearerAuth struct {
	Token string
	Roles []string
}

// GetToken returns the value of Token.
func (s *BearerAuth) GetToken() string {
	return s.Token
}

// GetRoles returns the value of Roles.
func (s *BearerAuth) GetRoles() []string {
	return s.Roles
}

// SetToken sets the value of Token.
func (s *BearerAuth) SetToken(val string) {
	s.Token = val
}

// SetRoles sets the value of Roles.
func (s *BearerAuth) SetRoles(val []string) {
	s.Roles = val
}

type CheckHealthOK struct {
	Revision string `json:"revision"`
}

// GetRevision returns the value of Revision.
func (s *CheckHealthOK) GetRevision() string {
	return s.Revision
}

// SetRevision sets the value of Revision.
func (s *CheckHealthOK) SetRevision(val string) {
	s.Revision = val
}

type CreateProjectReq struct {
	Name  string                `json:"name"`
	Color CreateProjectReqColor `json:"color"`
}

// GetName returns the value of Name.
func (s *CreateProjectReq) GetName() string {
	return s.Name
}

// GetColor returns the value of Color.
func (s *CreateProjectReq) GetColor() CreateProjectReqColor {
	return s.Color
}

// SetName sets the value of Name.
func (s *CreateProjectReq) SetName(val string) {
	s.Name = val
}

// SetColor sets the value of Color.
func (s *CreateProjectReq) SetColor(val CreateProjectReqColor) {
	s.Color = val
}

type CreateProjectReqColor string

const (
	CreateProjectReqColorBlue    CreateProjectReqColor = "blue"
	CreateProjectReqColorBrown   CreateProjectReqColor = "brown"
	CreateProjectReqColorDefault CreateProjectReqColor = "default"
	CreateProjectReqColorGray    CreateProjectReqColor = "gray"
	CreateProjectReqColorGreen   CreateProjectReqColor = "green"
	CreateProjectReqColorOrange  CreateProjectReqColor = "orange"
	CreateProjectReqColorPink    CreateProjectReqColor = "pink"
	CreateProjectReqColorPurple  CreateProjectReqColor = "purple"
	CreateProjectReqColorRed     CreateProjectReqColor = "red"
	CreateProjectReqColorYellow  CreateProjectReqColor = "yellow"
)

// AllValues returns all CreateProjectReqColor values.
func (CreateProjectReqColor) AllValues() []CreateProjectReqColor {
	return []CreateProjectReqColor{
		CreateProjectReqColorBlue,
		CreateProjectReqColorBrown,
		CreateProjectReqColorDefault,
		CreateProjectReqColorGray,
		CreateProjectReqColorGreen,
		CreateProjectReqColorOrange,
		CreateProjectReqColorPink,
		CreateProjectReqColorPurple,
		CreateProjectReqColorRed,
		CreateProjectReqColorYellow,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateProjectReqColor) MarshalText() ([]byte, error) {
	switch s {
	case CreateProjectReqColorBlue:
		return []byte(s), nil
	case CreateProjectReqColorBrown:
		return []byte(s), nil
	case CreateProjectReqColorDefault:
		return []byte(s), nil
	case CreateProjectReqColorGray:
		return []byte(s), nil
	case CreateProjectReqColorGreen:
		return []byte(s), nil
	case CreateProjectReqColorOrange:
		return []byte(s), nil
	case CreateProjectReqColorPink:
		return []byte(s), nil
	case CreateProjectReqColorPurple:
		return []byte(s), nil
	case CreateProjectReqColorRed:
		return []byte(s), nil
	case CreateProjectReqColorYellow:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateProjectReqColor) UnmarshalText(data []byte) error {
	switch CreateProjectReqColor(data) {
	case CreateProjectReqColorBlue:
		*s = CreateProjectReqColorBlue
		return nil
	case CreateProjectReqColorBrown:
		*s = CreateProjectReqColorBrown
		return nil
	case CreateProjectReqColorDefault:
		*s = CreateProjectReqColorDefault
		return nil
	case CreateProjectReqColorGray:
		*s = CreateProjectReqColorGray
		return nil
	case CreateProjectReqColorGreen:
		*s = CreateProjectReqColorGreen
		return nil
	case CreateProjectReqColorOrange:
		*s = CreateProjectReqColorOrange
		return nil
	case CreateProjectReqColorPink:
		*s = CreateProjectReqColorPink
		return nil
	case CreateProjectReqColorPurple:
		*s = CreateProjectReqColorPurple
		return nil
	case CreateProjectReqColorRed:
		*s = CreateProjectReqColorRed
		return nil
	case CreateProjectReqColorYellow:
		*s = CreateProjectReqColorYellow
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreateStepReq struct {
	Name string `json:"name"`
}

// GetName returns the value of Name.
func (s *CreateStepReq) GetName() string {
	return s.Name
}

// SetName sets the value of Name.
func (s *CreateStepReq) SetName(val string) {
	s.Name = val
}

type CreateTagReq struct {
	Name string `json:"name"`
}

// GetName returns the value of Name.
func (s *CreateTagReq) GetName() string {
	return s.Name
}

// SetName sets the value of Name.
func (s *CreateTagReq) SetName(val string) {
	s.Name = val
}

type CreateTaskReq struct {
	Name     string `json:"name"`
	Priority int    `json:"priority"`
}

// GetName returns the value of Name.
func (s *CreateTaskReq) GetName() string {
	return s.Name
}

// GetPriority returns the value of Priority.
func (s *CreateTaskReq) GetPriority() int {
	return s.Priority
}

// SetName sets the value of Name.
func (s *CreateTaskReq) SetName(val string) {
	s.Name = val
}

// SetPriority sets the value of Priority.
func (s *CreateTaskReq) SetPriority(val int) {
	s.Priority = val
}

// DeleteProjectOK is response for DeleteProject operation.
type DeleteProjectOK struct{}

// DeleteStepOK is response for DeleteStep operation.
type DeleteStepOK struct{}

// DeleteTagOK is response for DeleteTag operation.
type DeleteTagOK struct{}

// DeleteTaskOK is response for DeleteTask operation.
type DeleteTaskOK struct{}

type ListProjectsOK struct {
	Projects []Project `json:"projects"`
	HasNext  bool      `json:"has_next"`
}

// GetProjects returns the value of Projects.
func (s *ListProjectsOK) GetProjects() []Project {
	return s.Projects
}

// GetHasNext returns the value of HasNext.
func (s *ListProjectsOK) GetHasNext() bool {
	return s.HasNext
}

// SetProjects sets the value of Projects.
func (s *ListProjectsOK) SetProjects(val []Project) {
	s.Projects = val
}

// SetHasNext sets the value of HasNext.
func (s *ListProjectsOK) SetHasNext(val bool) {
	s.HasNext = val
}

type ListTagsOK struct {
	Tags    []Tag `json:"tags"`
	HasNext bool  `json:"has_next"`
}

// GetTags returns the value of Tags.
func (s *ListTagsOK) GetTags() []Tag {
	return s.Tags
}

// GetHasNext returns the value of HasNext.
func (s *ListTagsOK) GetHasNext() bool {
	return s.HasNext
}

// SetTags sets the value of Tags.
func (s *ListTagsOK) SetTags(val []Tag) {
	s.Tags = val
}

// SetHasNext sets the value of HasNext.
func (s *ListTagsOK) SetHasNext(val bool) {
	s.HasNext = val
}

type ListTasksOK struct {
	Tasks   []Task `json:"tasks"`
	HasNext bool   `json:"has_next"`
}

// GetTasks returns the value of Tasks.
func (s *ListTasksOK) GetTasks() []Task {
	return s.Tasks
}

// GetHasNext returns the value of HasNext.
func (s *ListTasksOK) GetHasNext() bool {
	return s.HasNext
}

// SetTasks sets the value of Tasks.
func (s *ListTasksOK) SetTasks(val []Task) {
	s.Tasks = val
}

// SetHasNext sets the value of HasNext.
func (s *ListTasksOK) SetHasNext(val bool) {
	s.HasNext = val
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDate returns new OptDate with value set to v.
func NewOptDate(v time.Time) OptDate {
	return OptDate{
		Value: v,
		Set:   true,
	}
}

// OptDate is optional time.Time.
type OptDate struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDate was set.
func (o OptDate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDate) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDate) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDate) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDate) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilDate returns new OptNilDate with value set to v.
func NewOptNilDate(v time.Time) OptNilDate {
	return OptNilDate{
		Value: v,
		Set:   true,
	}
}

// OptNilDate is optional nullable time.Time.
type OptNilDate struct {
	Value time.Time
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilDate was set.
func (o OptNilDate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilDate) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilDate) SetTo(v time.Time) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilDate) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilDate) SetToNull() {
	o.Set = true
	o.Null = true
	var v time.Time
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilDate) Get() (v time.Time, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilDate) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilDateTime returns new OptNilDateTime with value set to v.
func NewOptNilDateTime(v time.Time) OptNilDateTime {
	return OptNilDateTime{
		Value: v,
		Set:   true,
	}
}

// OptNilDateTime is optional nullable time.Time.
type OptNilDateTime struct {
	Value time.Time
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilDateTime was set.
func (o OptNilDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilDateTime) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilDateTime) SetToNull() {
	o.Set = true
	o.Null = true
	var v time.Time
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilDateTime) Get() (v time.Time, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateProjectReqColor returns new OptUpdateProjectReqColor with value set to v.
func NewOptUpdateProjectReqColor(v UpdateProjectReqColor) OptUpdateProjectReqColor {
	return OptUpdateProjectReqColor{
		Value: v,
		Set:   true,
	}
}

// OptUpdateProjectReqColor is optional UpdateProjectReqColor.
type OptUpdateProjectReqColor struct {
	Value UpdateProjectReqColor
	Set   bool
}

// IsSet returns true if OptUpdateProjectReqColor was set.
func (o OptUpdateProjectReqColor) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateProjectReqColor) Reset() {
	var v UpdateProjectReqColor
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateProjectReqColor) SetTo(v UpdateProjectReqColor) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateProjectReqColor) Get() (v UpdateProjectReqColor, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateProjectReqColor) Or(d UpdateProjectReqColor) UpdateProjectReqColor {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/project
type Project struct {
	ID         string       `json:"id"`
	Name       string       `json:"name"`
	Color      ProjectColor `json:"color"`
	IsArchived bool         `json:"is_archived"`
	CreatedAt  time.Time    `json:"created_at"`
	UpdatedAt  time.Time    `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *Project) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *Project) GetName() string {
	return s.Name
}

// GetColor returns the value of Color.
func (s *Project) GetColor() ProjectColor {
	return s.Color
}

// GetIsArchived returns the value of IsArchived.
func (s *Project) GetIsArchived() bool {
	return s.IsArchived
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Project) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Project) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *Project) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Project) SetName(val string) {
	s.Name = val
}

// SetColor sets the value of Color.
func (s *Project) SetColor(val ProjectColor) {
	s.Color = val
}

// SetIsArchived sets the value of IsArchived.
func (s *Project) SetIsArchived(val bool) {
	s.IsArchived = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Project) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Project) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

type ProjectColor string

const (
	ProjectColorBlue    ProjectColor = "blue"
	ProjectColorBrown   ProjectColor = "brown"
	ProjectColorDefault ProjectColor = "default"
	ProjectColorGray    ProjectColor = "gray"
	ProjectColorGreen   ProjectColor = "green"
	ProjectColorOrange  ProjectColor = "orange"
	ProjectColorPink    ProjectColor = "pink"
	ProjectColorPurple  ProjectColor = "purple"
	ProjectColorRed     ProjectColor = "red"
	ProjectColorYellow  ProjectColor = "yellow"
)

// AllValues returns all ProjectColor values.
func (ProjectColor) AllValues() []ProjectColor {
	return []ProjectColor{
		ProjectColorBlue,
		ProjectColorBrown,
		ProjectColorDefault,
		ProjectColorGray,
		ProjectColorGreen,
		ProjectColorOrange,
		ProjectColorPink,
		ProjectColorPurple,
		ProjectColorRed,
		ProjectColorYellow,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ProjectColor) MarshalText() ([]byte, error) {
	switch s {
	case ProjectColorBlue:
		return []byte(s), nil
	case ProjectColorBrown:
		return []byte(s), nil
	case ProjectColorDefault:
		return []byte(s), nil
	case ProjectColorGray:
		return []byte(s), nil
	case ProjectColorGreen:
		return []byte(s), nil
	case ProjectColorOrange:
		return []byte(s), nil
	case ProjectColorPink:
		return []byte(s), nil
	case ProjectColorPurple:
		return []byte(s), nil
	case ProjectColorRed:
		return []byte(s), nil
	case ProjectColorYellow:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ProjectColor) UnmarshalText(data []byte) error {
	switch ProjectColor(data) {
	case ProjectColorBlue:
		*s = ProjectColorBlue
		return nil
	case ProjectColorBrown:
		*s = ProjectColorBrown
		return nil
	case ProjectColorDefault:
		*s = ProjectColorDefault
		return nil
	case ProjectColorGray:
		*s = ProjectColorGray
		return nil
	case ProjectColorGreen:
		*s = ProjectColorGreen
		return nil
	case ProjectColorOrange:
		*s = ProjectColorOrange
		return nil
	case ProjectColorPink:
		*s = ProjectColorPink
		return nil
	case ProjectColorPurple:
		*s = ProjectColorPurple
		return nil
	case ProjectColorRed:
		*s = ProjectColorRed
		return nil
	case ProjectColorYellow:
		*s = ProjectColorYellow
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type SignInOK struct {
	IDToken string `json:"id_token"`
}

// GetIDToken returns the value of IDToken.
func (s *SignInOK) GetIDToken() string {
	return s.IDToken
}

// SetIDToken sets the value of IDToken.
func (s *SignInOK) SetIDToken(val string) {
	s.IDToken = val
}

type SignInReq struct {
	Email    string `json:"email"`
	Password string `json:"password" log:"mask"`
}

// GetEmail returns the value of Email.
func (s *SignInReq) GetEmail() string {
	return s.Email
}

// GetPassword returns the value of Password.
func (s *SignInReq) GetPassword() string {
	return s.Password
}

// SetEmail sets the value of Email.
func (s *SignInReq) SetEmail(val string) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *SignInReq) SetPassword(val string) {
	s.Password = val
}

type SignUpOK struct {
	IDToken string `json:"id_token"`
}

// GetIDToken returns the value of IDToken.
func (s *SignUpOK) GetIDToken() string {
	return s.IDToken
}

// SetIDToken sets the value of IDToken.
func (s *SignUpOK) SetIDToken(val string) {
	s.IDToken = val
}

type SignUpReq struct {
	Email    string `json:"email"`
	Password string `json:"password" log:"mask"`
}

// GetEmail returns the value of Email.
func (s *SignUpReq) GetEmail() string {
	return s.Email
}

// GetPassword returns the value of Password.
func (s *SignUpReq) GetPassword() string {
	return s.Password
}

// SetEmail sets the value of Email.
func (s *SignUpReq) SetEmail(val string) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *SignUpReq) SetPassword(val string) {
	s.Password = val
}

// Ref: #/components/schemas/step
type Step struct {
	ID          string      `json:"id"`
	TaskID      string      `json:"task_id"`
	Name        string      `json:"name"`
	CompletedAt OptDateTime `json:"completed_at"`
	CreatedAt   time.Time   `json:"created_at"`
	UpdatedAt   time.Time   `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *Step) GetID() string {
	return s.ID
}

// GetTaskID returns the value of TaskID.
func (s *Step) GetTaskID() string {
	return s.TaskID
}

// GetName returns the value of Name.
func (s *Step) GetName() string {
	return s.Name
}

// GetCompletedAt returns the value of CompletedAt.
func (s *Step) GetCompletedAt() OptDateTime {
	return s.CompletedAt
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Step) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Step) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *Step) SetID(val string) {
	s.ID = val
}

// SetTaskID sets the value of TaskID.
func (s *Step) SetTaskID(val string) {
	s.TaskID = val
}

// SetName sets the value of Name.
func (s *Step) SetName(val string) {
	s.Name = val
}

// SetCompletedAt sets the value of CompletedAt.
func (s *Step) SetCompletedAt(val OptDateTime) {
	s.CompletedAt = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Step) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Step) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// Ref: #/components/schemas/tag
type Tag struct {
	ID        string    `json:"id"`
	Name      string    `json:"name"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *Tag) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *Tag) GetName() string {
	return s.Name
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Tag) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Tag) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *Tag) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Tag) SetName(val string) {
	s.Name = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Tag) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Tag) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// Ref: #/components/schemas/task
type Task struct {
	ID          string      `json:"id"`
	ProjectID   string      `json:"project_id"`
	Name        string      `json:"name"`
	Content     string      `json:"content"`
	Priority    int         `json:"priority"`
	DueOn       OptDate     `json:"due_on"`
	CompletedAt OptDateTime `json:"completed_at"`
	CreatedAt   time.Time   `json:"created_at"`
	UpdatedAt   time.Time   `json:"updated_at"`
	Steps       []Step      `json:"steps"`
	Tags        []Tag       `json:"tags"`
}

// GetID returns the value of ID.
func (s *Task) GetID() string {
	return s.ID
}

// GetProjectID returns the value of ProjectID.
func (s *Task) GetProjectID() string {
	return s.ProjectID
}

// GetName returns the value of Name.
func (s *Task) GetName() string {
	return s.Name
}

// GetContent returns the value of Content.
func (s *Task) GetContent() string {
	return s.Content
}

// GetPriority returns the value of Priority.
func (s *Task) GetPriority() int {
	return s.Priority
}

// GetDueOn returns the value of DueOn.
func (s *Task) GetDueOn() OptDate {
	return s.DueOn
}

// GetCompletedAt returns the value of CompletedAt.
func (s *Task) GetCompletedAt() OptDateTime {
	return s.CompletedAt
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Task) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Task) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetSteps returns the value of Steps.
func (s *Task) GetSteps() []Step {
	return s.Steps
}

// GetTags returns the value of Tags.
func (s *Task) GetTags() []Tag {
	return s.Tags
}

// SetID sets the value of ID.
func (s *Task) SetID(val string) {
	s.ID = val
}

// SetProjectID sets the value of ProjectID.
func (s *Task) SetProjectID(val string) {
	s.ProjectID = val
}

// SetName sets the value of Name.
func (s *Task) SetName(val string) {
	s.Name = val
}

// SetContent sets the value of Content.
func (s *Task) SetContent(val string) {
	s.Content = val
}

// SetPriority sets the value of Priority.
func (s *Task) SetPriority(val int) {
	s.Priority = val
}

// SetDueOn sets the value of DueOn.
func (s *Task) SetDueOn(val OptDate) {
	s.DueOn = val
}

// SetCompletedAt sets the value of CompletedAt.
func (s *Task) SetCompletedAt(val OptDateTime) {
	s.CompletedAt = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Task) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Task) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetSteps sets the value of Steps.
func (s *Task) SetSteps(val []Step) {
	s.Steps = val
}

// SetTags sets the value of Tags.
func (s *Task) SetTags(val []Tag) {
	s.Tags = val
}

type UpdateProjectReq struct {
	Name       OptString                `json:"name"`
	Color      OptUpdateProjectReqColor `json:"color"`
	IsArchived OptBool                  `json:"is_archived"`
}

// GetName returns the value of Name.
func (s *UpdateProjectReq) GetName() OptString {
	return s.Name
}

// GetColor returns the value of Color.
func (s *UpdateProjectReq) GetColor() OptUpdateProjectReqColor {
	return s.Color
}

// GetIsArchived returns the value of IsArchived.
func (s *UpdateProjectReq) GetIsArchived() OptBool {
	return s.IsArchived
}

// SetName sets the value of Name.
func (s *UpdateProjectReq) SetName(val OptString) {
	s.Name = val
}

// SetColor sets the value of Color.
func (s *UpdateProjectReq) SetColor(val OptUpdateProjectReqColor) {
	s.Color = val
}

// SetIsArchived sets the value of IsArchived.
func (s *UpdateProjectReq) SetIsArchived(val OptBool) {
	s.IsArchived = val
}

type UpdateProjectReqColor string

const (
	UpdateProjectReqColorBlue    UpdateProjectReqColor = "blue"
	UpdateProjectReqColorBrown   UpdateProjectReqColor = "brown"
	UpdateProjectReqColorDefault UpdateProjectReqColor = "default"
	UpdateProjectReqColorGray    UpdateProjectReqColor = "gray"
	UpdateProjectReqColorGreen   UpdateProjectReqColor = "green"
	UpdateProjectReqColorOrange  UpdateProjectReqColor = "orange"
	UpdateProjectReqColorPink    UpdateProjectReqColor = "pink"
	UpdateProjectReqColorPurple  UpdateProjectReqColor = "purple"
	UpdateProjectReqColorRed     UpdateProjectReqColor = "red"
	UpdateProjectReqColorYellow  UpdateProjectReqColor = "yellow"
)

// AllValues returns all UpdateProjectReqColor values.
func (UpdateProjectReqColor) AllValues() []UpdateProjectReqColor {
	return []UpdateProjectReqColor{
		UpdateProjectReqColorBlue,
		UpdateProjectReqColorBrown,
		UpdateProjectReqColorDefault,
		UpdateProjectReqColorGray,
		UpdateProjectReqColorGreen,
		UpdateProjectReqColorOrange,
		UpdateProjectReqColorPink,
		UpdateProjectReqColorPurple,
		UpdateProjectReqColorRed,
		UpdateProjectReqColorYellow,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdateProjectReqColor) MarshalText() ([]byte, error) {
	switch s {
	case UpdateProjectReqColorBlue:
		return []byte(s), nil
	case UpdateProjectReqColorBrown:
		return []byte(s), nil
	case UpdateProjectReqColorDefault:
		return []byte(s), nil
	case UpdateProjectReqColorGray:
		return []byte(s), nil
	case UpdateProjectReqColorGreen:
		return []byte(s), nil
	case UpdateProjectReqColorOrange:
		return []byte(s), nil
	case UpdateProjectReqColorPink:
		return []byte(s), nil
	case UpdateProjectReqColorPurple:
		return []byte(s), nil
	case UpdateProjectReqColorRed:
		return []byte(s), nil
	case UpdateProjectReqColorYellow:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateProjectReqColor) UnmarshalText(data []byte) error {
	switch UpdateProjectReqColor(data) {
	case UpdateProjectReqColorBlue:
		*s = UpdateProjectReqColorBlue
		return nil
	case UpdateProjectReqColorBrown:
		*s = UpdateProjectReqColorBrown
		return nil
	case UpdateProjectReqColorDefault:
		*s = UpdateProjectReqColorDefault
		return nil
	case UpdateProjectReqColorGray:
		*s = UpdateProjectReqColorGray
		return nil
	case UpdateProjectReqColorGreen:
		*s = UpdateProjectReqColorGreen
		return nil
	case UpdateProjectReqColorOrange:
		*s = UpdateProjectReqColorOrange
		return nil
	case UpdateProjectReqColorPink:
		*s = UpdateProjectReqColorPink
		return nil
	case UpdateProjectReqColorPurple:
		*s = UpdateProjectReqColorPurple
		return nil
	case UpdateProjectReqColorRed:
		*s = UpdateProjectReqColorRed
		return nil
	case UpdateProjectReqColorYellow:
		*s = UpdateProjectReqColorYellow
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UpdateStepReq struct {
	Name        OptString      `json:"name"`
	CompletedAt OptNilDateTime `json:"completed_at"`
}

// GetName returns the value of Name.
func (s *UpdateStepReq) GetName() OptString {
	return s.Name
}

// GetCompletedAt returns the value of CompletedAt.
func (s *UpdateStepReq) GetCompletedAt() OptNilDateTime {
	return s.CompletedAt
}

// SetName sets the value of Name.
func (s *UpdateStepReq) SetName(val OptString) {
	s.Name = val
}

// SetCompletedAt sets the value of CompletedAt.
func (s *UpdateStepReq) SetCompletedAt(val OptNilDateTime) {
	s.CompletedAt = val
}

type UpdateTagReq struct {
	Name OptString `json:"name"`
}

// GetName returns the value of Name.
func (s *UpdateTagReq) GetName() OptString {
	return s.Name
}

// SetName sets the value of Name.
func (s *UpdateTagReq) SetName(val OptString) {
	s.Name = val
}

type UpdateTaskReq struct {
	Name        OptString      `json:"name"`
	Content     OptString      `json:"content"`
	Priority    OptInt         `json:"priority"`
	DueOn       OptNilDate     `json:"due_on"`
	CompletedAt OptNilDateTime `json:"completed_at"`
}

// GetName returns the value of Name.
func (s *UpdateTaskReq) GetName() OptString {
	return s.Name
}

// GetContent returns the value of Content.
func (s *UpdateTaskReq) GetContent() OptString {
	return s.Content
}

// GetPriority returns the value of Priority.
func (s *UpdateTaskReq) GetPriority() OptInt {
	return s.Priority
}

// GetDueOn returns the value of DueOn.
func (s *UpdateTaskReq) GetDueOn() OptNilDate {
	return s.DueOn
}

// GetCompletedAt returns the value of CompletedAt.
func (s *UpdateTaskReq) GetCompletedAt() OptNilDateTime {
	return s.CompletedAt
}

// SetName sets the value of Name.
func (s *UpdateTaskReq) SetName(val OptString) {
	s.Name = val
}

// SetContent sets the value of Content.
func (s *UpdateTaskReq) SetContent(val OptString) {
	s.Content = val
}

// SetPriority sets the value of Priority.
func (s *UpdateTaskReq) SetPriority(val OptInt) {
	s.Priority = val
}

// SetDueOn sets the value of DueOn.
func (s *UpdateTaskReq) SetDueOn(val OptNilDate) {
	s.DueOn = val
}

// SetCompletedAt sets the value of CompletedAt.
func (s *UpdateTaskReq) SetCompletedAt(val OptNilDateTime) {
	s.CompletedAt = val
}
