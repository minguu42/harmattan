// Code generated by ogen, DO NOT EDIT.

package openapi

import (
	"context"
	"net/http"
	"strings"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/ogenerrors"
)

// SecurityHandler is handler for security parameters.
type SecurityHandler interface {
	// HandleBearerAuth handles bearerAuth security.
	HandleBearerAuth(ctx context.Context, operationName OperationName, t BearerAuth) (context.Context, error)
}

func findAuthorization(h http.Header, prefix string) (string, bool) {
	v, ok := h["Authorization"]
	if !ok {
		return "", false
	}
	for _, vv := range v {
		scheme, value, ok := strings.Cut(vv, " ")
		if !ok || !strings.EqualFold(scheme, prefix) {
			continue
		}
		return value, true
	}
	return "", false
}

var operationRolesBearerAuth = map[string][]string{
	CreateProjectOperation: []string{},
	CreateStepOperation:    []string{},
	CreateTagOperation:     []string{},
	CreateTaskOperation:    []string{},
	DeleteProjectOperation: []string{},
	DeleteStepOperation:    []string{},
	DeleteTagOperation:     []string{},
	DeleteTaskOperation:    []string{},
	GetProjectOperation:    []string{},
	GetTagOperation:        []string{},
	GetTaskOperation:       []string{},
	ListProjectsOperation:  []string{},
	ListTagsOperation:      []string{},
	ListTasksOperation:     []string{},
	UpdateProjectOperation: []string{},
	UpdateStepOperation:    []string{},
	UpdateTagOperation:     []string{},
	UpdateTaskOperation:    []string{},
}

func (s *Server) securityBearerAuth(ctx context.Context, operationName OperationName, req *http.Request) (context.Context, bool, error) {
	var t BearerAuth
	token, ok := findAuthorization(req.Header, "Bearer")
	if !ok {
		return ctx, false, nil
	}
	t.Token = token
	t.Roles = operationRolesBearerAuth[operationName]
	rctx, err := s.sec.HandleBearerAuth(ctx, operationName, t)
	if errors.Is(err, ogenerrors.ErrSkipServerSecurity) {
		return nil, false, nil
	} else if err != nil {
		return nil, false, err
	}
	return rctx, true, err
}
