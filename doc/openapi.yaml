openapi: 3.0.3

info:
  title: Opepe API Specification
  version: 0.1.5

servers:
  - url: http://localhost:8080/
    description: ローカル環境のAPIサーバ

tags:
  - name: projects
  - name: tasks
  - name: monitoring

paths:
  /projects:
    post:
      tags:
        - projects
      summary: 新しいプロジェクトを作成する
      operationId: createProject
      security:
        - isAuthorized: [ ]
      requestBody:
        $ref: "#/components/requestBodies/CreateProjectRequest"
      responses:
        201:
          description: 成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        default:
          $ref: "#/components/responses/Error"
    get:
      tags:
        - projects
      summary: プロジェクト一覧を取得する
      operationId: listProjects
      security:
        - isAuthorized: [ ]
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
        - $ref: "#/components/parameters/sort"
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Projects"
        default:
          $ref: "#/components/responses/Error"
  /projects/{projectID}:
    parameters:
      - $ref: "#/components/parameters/projectID"
    patch:
      tags:
        - projects
      summary: プロジェクトを更新する
      operationId: updateProject
      security:
        - isAuthorized: [ ]
      requestBody:
        $ref: "#/components/requestBodies/UpdateProjectRequest"
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        default:
          $ref: "#/components/responses/Error"
    delete:
      tags:
        - projects
      summary: プロジェクトを削除する
      operationId: deleteProject
      security:
        - isAuthorized: [ ]
      responses:
        204:
          description: 成功
        default:
          $ref: "#/components/responses/Error"
  /projects/{projectID}/tasks:
    parameters:
      - $ref: "#/components/parameters/projectID"
    post:
      tags:
        - tasks
      summary: 新しいタスクを作成する
      operationId: createTask
      security:
        - isAuthorized: [ ]
      requestBody:
        $ref: "#/components/requestBodies/CreateTaskRequest"
      responses:
        201:
          description: 成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        default:
          $ref: "#/components/responses/Error"
    get:
      tags:
        - tasks
      summary: タスク一覧を取得する
      operationId: listTasks
      security:
        - isAuthorized: [ ]
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
        - $ref: "#/components/parameters/sort"
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tasks"
        default:
          $ref: "#/components/responses/Error"
  /projects/{projectID}/tasks/{taskID}:
    parameters:
      - $ref: "#/components/parameters/projectID"
      - $ref: "#/components/parameters/taskID"
    patch:
      tags:
        - tasks
      summary: タスクを更新する
      operationId: updateTask
      security:
        - isAuthorized: [ ]
      requestBody:
        $ref: "#/components/requestBodies/UpdateTaskRequest"
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        default:
          $ref: "#/components/responses/Error"
    delete:
      tags:
        - tasks
      summary: タスクを削除する
      operationId: deleteTask
      security:
        - isAuthorized: [ ]
      responses:
        204:
          description: 成功
        default:
          $ref: "#/components/responses/Error"
  /health:
    get:
      tags:
        - monitoring
      summary: サーバの状態を取得する
      operationId: getHealth
      security: [ ]
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    description: Opepe APIのバージョン
                    type: string
                    example: v0.1.0
                  revision:
                    description: Opepe APIのリビジョン
                    type: string
                    example: a1b2c3d
                required:
                  - version
                  - revision
        default:
          $ref: "#/components/responses/Error"

components:
  schemas:
    Project:
      type: object
      properties:
        id:
          description: プロジェクトID
          type: string
        name:
          description: プロジェクト名
          type: string
          example: プロジェクト1
        color:
          description: プロジェクトカラー
          type: string
          example: "#1A2B3C"
        isArchived:
          description: アーカイブ済みか
          type: boolean
        createdAt:
          description: 作成日時
          type: string
          format: date-time
        updatedAt:
          description: 更新日時
          type: string
          format: date-time
      required:
        - id
        - name
        - color
        - isArchived
        - createdAt
        - updatedAt
    Projects:
      type: object
      properties:
        projects:
          description: プロジェクト一覧
          type: array
          items:
            $ref: "#/components/schemas/Project"
        hasNext:
          description: まだ取得可能なプロジェクトが存在するか
          type: boolean
      required:
        - projects
        - hasNext
    Task:
      type: object
      properties:
        id:
          description: タスクID
          type: string
        project_id:
          description: 紐づくプロジェクトのID
          type: string
        title:
          description: タイトル
          type: string
          example: タスク1
        content:
          description: 内容
          type: string
        priority:
          type: integer
        dueOn:
          type: string
          format: date
        completedAt:
          description: 完了日時
          type: string
          format: date-time
        createdAt:
          description: 作成日時
          type: string
          format: date-time
        updatedAt:
          description: 更新日時
          type: string
          format: date-time
      required:
        - id
        - project_id
        - title
        - content
        - priority
        - createdAt
        - updatedAt
    Tasks:
      type: object
      properties:
        tasks:
          description: タスク一覧
          type: array
          items:
            $ref: "#/components/schemas/Task"
        hasNext:
          description: まだ取得可能なタスクが存在するか
          type: boolean
      required:
        - tasks
        - hasNext
  responses:
    Error:
      description: エラー
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                description: エラーコード
                type: integer
              message:
                description: ユーザ向けの大まかなエラーの説明
                type: string
            required:
              - code
              - message
  parameters:
    limit:
      name: limit
      in: query
      description: リソースの最大取得数を指定する。
      schema:
        type: integer
        minimum: 1
        maximum: 25
        default: 10
    offset:
      name: offset
      in: query
      description: リソースの取得開始位置を指定する。
      schema:
        type: integer
        minimum: 0
        default: 0
    sort:
      name: sort
      in: query
      description: リソースの並び順を指定する。`-`をつければ降順になり、つけなければ昇順となる。
      schema:
        type: string
        enum:
          - createdAt
          - -createdAt
        default: -createdAt
    projectID:
      name: projectID
      in: path
      required: true
      schema:
        type: string
        minLength: 26
        maxLength: 26
    taskID:
      name: taskID
      in: path
      required: true
      schema:
        type: string
        minLength: 26
        maxLength: 26
  requestBodies:
    CreateProjectRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                minLength: 1
                maxLength: 20
                example: プロジェクト1
              color:
                type: string
                minLength: 7
                maxLength: 7
                example: "#1A2B3C"
            required:
              - name
              - color
      required: true
    UpdateProjectRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                minLength: 1
                maxLength: 20
                example: プロジェクト1
              color:
                type: string
                minLength: 7
                maxLength: 7
                example: "#1A2B3C"
              isArchived:
                type: boolean
                example: true
            minProperties: 1
      required: true
    CreateTaskRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              title:
                type: string
                minLength: 1
                maxLength: 80
                example: タスク1
              content:
                type: string
                maxLength: 300
              priority:
                type: integer
                minimum: 0
                maximum: 3
              dueOn:
                type: string
                format: date
            required:
              - title
              - content
              - priority
      required: true
    UpdateTaskRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              title:
                type: string
                minLength: 1
                maxLength: 80
                example: タスク1
              content:
                type: string
                maxLength: 300
              priority:
                type: integer
                minimum: 0
                maximum: 3
              dueOn:
                type: string
                format: date
              isCompleted:
                type: boolean
            minProperties: 1
      required: true
  securitySchemes:
    isAuthorized:
      type: apiKey
      name: X-Api-Key
      in: header
