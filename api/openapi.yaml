openapi: 3.0.3
info:
  title: Harmattan API
  version: 0.1.0
paths:
  /health:
    get:
      tags: [monitoring]
      operationId: checkHealth
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  revision:
                    type: string
                required: [revision]
  /sign-up:
    post:
      tags: [authentication]
      operationId: signUp
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                  x-oapi-codegen-extra-tags:
                    log: mask
              required: [email, password]
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id_token:
                    type: string
                required: [id_token]
  /sign-in:
    post:
      tags: [authentication]
      operationId: signIn
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                  x-oapi-codegen-extra-tags:
                    log: mask
              required: [email, password]
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id_token:
                    type: string
                required: [id_token]
  /projects:
    post:
      tags: [projects]
      operationId: createProject
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                color:
                  type: string
                  enum: [blue, brown, default, gray, green, orange, pink, purple, red, yellow]
              required: [name, color]
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/project"
      security:
        - bearerAuth: []
    get:
      tags: [projects]
      operationId: listProjects
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/projects"
      security:
        - bearerAuth: []
  /projects/{projectID}:
    parameters:
      - $ref: "#/components/parameters/projectID"
    patch:
      tags: [projects]
      operationId: updateProject
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                color:
                  type: string
                  enum: [blue, brown, default, gray, green, orange, pink, purple, red, yellow]
                is_archived:
                  type: boolean
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/project"
      security:
        - bearerAuth: []
    delete:
      tags: [projects]
      operationId: deleteProject
      responses:
        200:
          description: OK
      security:
        - bearerAuth: []
  /projects/{projectID}/tasks:
    parameters:
      - $ref: "#/components/parameters/projectID"
    post:
      tags: [tasks]
      operationId: createTask
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                priority:
                  type: integer
                  maximum: 3
              required: [name, priority]
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/task"
      security:
        - bearerAuth: []
    get:
      tags: [tasks]
      operationId: listTasks
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tasks"
      security:
        - bearerAuth: []
  /projects/{projectID}/tasks/{taskID}:
    parameters:
      - $ref: "#/components/parameters/projectID"
      - $ref: "#/components/parameters/taskID"
    patch:
      tags: [tasks]
      operationId: updateTask
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                content:
                  type: string
                priority:
                  type: integer
                  maximum: 3
                due_on:
                  type: string
                  format: date-time
                  nullable: true
                completed_at:
                  type: string
                  format: date-time
                  nullable: true
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/task"
      security:
        - bearerAuth: []
    delete:
      tags: [tasks]
      operationId: deleteTask
      responses:
        200:
          description: OK
      security:
        - bearerAuth: []
  /projects/{projectID}/tasks/{taskID}/steps:
    parameters:
      - $ref: "#/components/parameters/projectID"
      - $ref: "#/components/parameters/taskID"
    post:
      tags: [steps]
      operationId: createStep
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
              required: [name]
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/step"
      security:
        - bearerAuth: []
  /projects/{projectID}/tasks/{taskID}/steps/{stepID}:
    parameters:
      - $ref: "#/components/parameters/projectID"
      - $ref: "#/components/parameters/taskID"
      - $ref: "#/components/parameters/stepID"
    patch:
      tags: [steps]
      operationId: updateStep
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                completed_at:
                  type: string
                  format: date-time
                  nullable: true
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/step"
      security:
        - bearerAuth: []
    delete:
      tags: [steps]
      operationId: deleteStep
      responses:
        200:
          description: OK
      security:
        - bearerAuth: []
  /tags:
    post:
      tags: [tags]
      operationId: createTag
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
              required: [name]
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tag"
      security:
        - bearerAuth: []
    get:
      tags: [tags]
      operationId: listTags
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tags"
      security:
        - bearerAuth: []
  /tags/{tagID}:
    parameters:
      - $ref: "#/components/parameters/tagID"
    patch:
      tags: [tags]
      operationId: updateTag
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tag"
      security:
        - bearerAuth: []
    delete:
      tags: [tags]
      operationId: deleteTag
      responses:
        200:
          description: OK
      security:
        - bearerAuth: []
components:
  schemas:
    project:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        color:
          type: string
          enum: [blue, brown, default, gray, green, orange, pink, purple, red, yellow]
        is_archived:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required: [id, name, color, is_archived, created_at, updated_at]
    projects:
      type: object
      properties:
        projects:
          type: array
          items:
            $ref: "#/components/schemas/project"
        has_next:
          type: boolean
      required: [projects, has_next]
    task:
      type: object
      properties:
        id:
          type: string
        project_id:
          type: string
        name:
          type: string
        content:
          type: string
        priority:
          type: integer
        due_on:
          type: string
          format: date
        completed_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        steps:
          type: array
          items:
            $ref: "#/components/schemas/step"
        tags:
          type: array
          items:
            $ref: "#/components/schemas/tag"
      required: [id, project_id, name, content, priority, created_at, updated_at, steps, tags]
    tasks:
      type: object
      properties:
        tasks:
          type: array
          items:
            $ref: "#/components/schemas/task"
        has_next:
          type: boolean
      required: [tasks, has_next]
    step:
      type: object
      properties:
        id:
          type: string
        task_id:
          type: string
        name:
          type: string
        completed_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required: [id, task_id, name, created_at, updated_at]
    tag:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required: [id, name, created_at, updated_at]
    tags:
      type: object
      properties:
        tags:
          type: array
          items:
            $ref: "#/components/schemas/tag"
        has_next:
          type: boolean
      required: [tags, has_next]
  parameters:
    limit:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 50
        default: 20
    offset:
      name: offset
      in: query
      schema:
        type: integer
        minimum: 0
        default: 0
    projectID:
      name: projectID
      in: path
      required: true
      schema:
        type: string
        minLength: 26
        maxLength: 26
    taskID:
      name: taskID
      in: path
      required: true
      schema:
        type: string
        minLength: 26
        maxLength: 26
    stepID:
      name: stepID
      in: path
      required: true
      schema:
        type: string
        minLength: 26
        maxLength: 26
    tagID:
      name: tagID
      in: path
      required: true
      schema:
        type: string
        minLength: 26
        maxLength: 26
  securitySchemes:
    bearerAuth:
      type: http
      scheme: Bearer
tags:
  - name: monitoring
  - name: authentication
  - name: projects
  - name: tasks
  - name: steps
  - name: tags
