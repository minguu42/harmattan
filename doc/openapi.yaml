openapi: 3.0.3

info:
  title: mTasks API Specification
  description: mTasks APIの仕様を定義するドキュメント
  version: v0.1.1

servers:
  - url: http://localhost:8080/
    description: ローカル環境のAPIサーバ

paths:
  /projects:
    post:
      tags:
        - projects
      summary: 新しいプロジェクトを作成する
      operationId: CreateProject
      security:
        - isAuthorized: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  example: プロジェクト1
      responses:
        201:
          description: 成功
          headers:
            Location:
              description: 新しく作成したプロジェクトへのURL
              required: true
              schema:
                type: string
                format: uri
                example: http://localhost:8080/projects/1
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/project"
        400:
          $ref: "#/components/responses/BadRequestError"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        500:
          $ref: "#/components/responses/InternalServerError"
        501:
          $ref: "#/components/responses/NotImplementedError"
    get:
      tags:
        - projects
      summary: プロジェクト一覧を取得する
      description: 作成日時の降順で取得する。
      operationId: ListProjects
      security:
        - isAuthorized: [ ]
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
        - name: sort
          in: query
          description: 並び順を指定する。`-`をつければ降順になり、つけなければ昇順となる。
          schema:
            type: string
            enum:
              - createdAt
              - -createdAt
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/projects"
        400:
          $ref: "#/components/responses/BadRequestError"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        500:
          $ref: "#/components/responses/InternalServerError"
        501:
          $ref: "#/components/responses/NotImplementedError"
  /projects/{projectID}:
    parameters:
      - $ref: "#/components/parameters/projectID"
    patch:
      tags:
        - projects
      summary: プロジェクトを更新する
      operationId: UpdateProject
      security:
        - isAuthorized: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: プロジェクト1
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/project"
        400:
          $ref: "#/components/responses/BadRequestError"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          $ref: "#/components/responses/NotFoundError"
        500:
          $ref: "#/components/responses/InternalServerError"
        501:
          $ref: "#/components/responses/NotImplementedError"
    delete:
      tags:
        - projects
      summary: プロジェクトを削除する
      operationId: DeleteProject
      security:
        - isAuthorized: [ ]
      responses:
        204:
          description: 成功
        400:
          $ref: "#/components/responses/BadRequestError"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          $ref: "#/components/responses/NotFoundError"
        500:
          $ref: "#/components/responses/InternalServerError"
        501:
          $ref: "#/components/responses/NotImplementedError"
  /projects/{projectID}/tasks:
    parameters:
      - $ref: "#/components/parameters/projectID"
    post:
      tags:
        - tasks
      summary: 新しいタスクを作成する
      operationId: CreateTask
      security:
        - isAuthorized: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
              properties:
                title:
                  type: string
                  example: タスク1
      responses:
        201:
          description: 成功
          headers:
            Location:
              description: 新しく作成したタスクへのURL
              required: true
              schema:
                type: string
                format: uri
                example: http://localhost:8080/tasks/1
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/task"
        400:
          $ref: "#/components/responses/BadRequestError"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          $ref: "#/components/responses/NotFoundError"
        500:
          $ref: "#/components/responses/InternalServerError"
        501:
          $ref: "#/components/responses/NotImplementedError"
    get:
      tags:
        - tasks
      summary: タスク一覧を取得する
      description: 作成日時の降順で取得する。
      operationId: ListTasks
      security:
        - isAuthorized: [ ]
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
        - name: sort
          in: query
          description: 並び順を指定する。`-`をつければ降順になり、つけなければ昇順となる。
          schema:
            type: string
            enum:
              - createdAt
              - -createdAt
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tasks"
        400:
          $ref: "#/components/responses/BadRequestError"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          $ref: "#/components/responses/NotFoundError"
        500:
          $ref: "#/components/responses/InternalServerError"
        501:
          $ref: "#/components/responses/NotImplementedError"
  /projects/{projectID}/tasks/{taskID}:
    parameters:
      - $ref: "#/components/parameters/projectID"
      - $ref: "#/components/parameters/taskID"
    patch:
      tags:
        - tasks
      summary: タスクを更新する
      operationId: UpdateTask
      security:
        - isAuthorized: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                isCompleted:
                  type: boolean
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/task"
        400:
          $ref: "#/components/responses/BadRequestError"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          $ref: "#/components/responses/NotFoundError"
        500:
          $ref: "#/components/responses/InternalServerError"
        501:
          $ref: "#/components/responses/NotImplementedError"
    delete:
      tags:
        - tasks
      summary: タスクを削除する
      operationId: DeleteTask
      security:
        - isAuthorized: [ ]
      responses:
        204:
          description: 成功
        400:
          $ref: "#/components/responses/BadRequestError"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          $ref: "#/components/responses/NotFoundError"
        500:
          $ref: "#/components/responses/InternalServerError"
        501:
          $ref: "#/components/responses/NotImplementedError"
  /health:
    get:
      tags:
        - monitoring
      summary: サーバの状態を取得する
      operationId: GetHealth
      security: [ ]
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                type: object
                required:
                  - version
                  - revision
                properties:
                  version:
                    description: mTasks APIのバージョン
                    type: string
                    example: v0.1.0
                  revision:
                    description: mTasks APIのリビジョン
                    type: string
                    example: a1b2c3d
        501:
          $ref: "#/components/responses/NotImplementedError"
        503:
          $ref: "#/components/responses/ServerUnavailableError"

components:
  schemas:
    project:
      type: object
      required:
        - id
        - name
        - createdAt
        - updatedAt
      properties:
        id:
          description: プロジェクトID
          type: integer
          format: int64
          minimum: 1
        name:
          description: プロジェクト名
          type: string
          example: プロジェクト1
        createdAt:
          description: 作成日時
          type: string
          format: date-time
        updatedAt:
          description: 更新日時
          type: string
          format: date-time
    projects:
      type: object
      required:
        - projects
      properties:
        projects:
          description: プロジェクト一覧
          type: array
          items:
            $ref: "#/components/schemas/project"
    task:
      type: object
      required:
        - id
        - project_id
        - title
        - createdAt
        - updatedAt
      properties:
        id:
          description: タスクID
          type: integer
          format: int64
          minimum: 1
        project_id:
          description: 紐づくプロジェクトのID
          type: integer
          format: int64
          minimum: 1
        title:
          description: タイトル
          type: string
          example: タスク1
        completedAt:
          description: 完了日時
          type: string
          format: date-time
        createdAt:
          description: 作成日時
          type: string
          format: date-time
        updatedAt:
          description: 更新日時
          type: string
          format: date-time
    tasks:
      type: object
      required:
        - tasks
      properties:
        tasks:
          description: タスク一覧
          type: array
          items:
            $ref: "#/components/schemas/task"
    error:
      type: object
      required:
        - message
        - debug
      properties:
        message:
          description: ユーザ向けの大まかなエラーの説明
          type: string
        debug:
          description: 開発者向けの詳細なエラーの説明
          type: string
  parameters:
    limit:
      name: limit
      in: query
      description: リソースの最大取得数を指定する。
      schema:
        type: integer
        default: 10
        minimum: 1
        maximum: 30
    offset:
      name: offset
      in: query
      description: リソースの取得開始位置を指定する。
      schema:
        type: integer
        default: 0
        minimum: 0
    projectID:
      name: projectID
      in: path
      required: true
      schema:
        type: integer
        format: int64
        minimum: 1
    taskID:
      name: taskID
      in: path
      required: true
      schema:
        type: integer
        format: int64
        minimum: 1
  responses:
    BadRequestError:
      description: リクエストに何らかの間違いがあります。
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/error"
    UnauthorizedError:
      description: ユーザの認証に失敗しました。
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/error"
    NotFoundError:
      description: 指定されたリソースは存在しません。
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/error"
    InternalServerError:
      description: サーバで何らかのエラーが発生しました。もう一度お試しください。
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/error"
    NotImplementedError:
      description: この機能はもうすぐ使用できます。お楽しみに♪
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/error"
    ServerUnavailableError:
      description: サーバが一時的に利用できない状態です。時間を空けてから、もう一度お試しください。
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/error"
  securitySchemes:
    isAuthorized:
      type: apiKey
      name: X-Api-Key
      in: header

tags:
  - name: projects
    description: プロジェクトに関するオペレーション
  - name: tasks
    description: タスクに関するオペレーション
  - name: monitoring
    description: サーバ監視に関するオペレーション
