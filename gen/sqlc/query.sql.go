// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: query.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createProject = `-- name: CreateProject :exec
INSERT INTO projects (id, user_id, name, color, is_archived, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, ?, ?)
`

type CreateProjectParams struct {
	ID         string
	UserID     string
	Name       string
	Color      string
	IsArchived bool
	CreatedAt  time.Time
	UpdatedAt  time.Time
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) error {
	_, err := q.db.ExecContext(ctx, createProject,
		arg.ID,
		arg.UserID,
		arg.Name,
		arg.Color,
		arg.IsArchived,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const createTask = `-- name: CreateTask :exec
INSERT INTO tasks (id, project_id, title, content, priority, due_on, completed_at, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateTaskParams struct {
	ID          string
	ProjectID   string
	Title       string
	Content     string
	Priority    uint32
	DueOn       sql.NullTime
	CompletedAt sql.NullTime
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) error {
	_, err := q.db.ExecContext(ctx, createTask,
		arg.ID,
		arg.ProjectID,
		arg.Title,
		arg.Content,
		arg.Priority,
		arg.DueOn,
		arg.CompletedAt,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteProject = `-- name: DeleteProject :exec
DELETE FROM projects WHERE id = ?
`

func (q *Queries) DeleteProject(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteProject, id)
	return err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks WHERE id = ?
`

func (q *Queries) DeleteTask(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const getProjectByID = `-- name: GetProjectByID :one
SELECT id, user_id, name, color, is_archived, created_at, updated_at FROM projects
WHERE id = ?
`

func (q *Queries) GetProjectByID(ctx context.Context, id string) (Project, error) {
	row := q.db.QueryRowContext(ctx, getProjectByID, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Color,
		&i.IsArchived,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProjectsByUserID = `-- name: GetProjectsByUserID :many
SELECT id, user_id, name, color, is_archived, created_at, updated_at FROM projects
WHERE user_id = ?
ORDER BY created_at DESC
LIMIT ? OFFSET ?
`

type GetProjectsByUserIDParams struct {
	UserID string
	Limit  int32
	Offset int32
}

func (q *Queries) GetProjectsByUserID(ctx context.Context, arg GetProjectsByUserIDParams) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, getProjectsByUserID, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Color,
			&i.IsArchived,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTaskByID = `-- name: GetTaskByID :one
SELECT id, project_id, title, content, priority, due_on, completed_at, created_at, updated_at FROM tasks
WHERE id = ?
`

func (q *Queries) GetTaskByID(ctx context.Context, id string) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTaskByID, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Title,
		&i.Content,
		&i.Priority,
		&i.DueOn,
		&i.CompletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTasksByProjectID = `-- name: GetTasksByProjectID :many
SELECT id, project_id, title, content, priority, due_on, completed_at, created_at, updated_at FROM tasks
WHERE project_id = ?
ORDER BY created_at DESC
LIMIT ? OFFSET ?
`

type GetTasksByProjectIDParams struct {
	ProjectID string
	Limit     int32
	Offset    int32
}

func (q *Queries) GetTasksByProjectID(ctx context.Context, arg GetTasksByProjectIDParams) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getTasksByProjectID, arg.ProjectID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.Title,
			&i.Content,
			&i.Priority,
			&i.DueOn,
			&i.CompletedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByAPIKey = `-- name: GetUserByAPIKey :one
SELECT id, name, api_key, created_at, updated_at FROM users
WHERE api_key = ?
`

func (q *Queries) GetUserByAPIKey(ctx context.Context, apiKey string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByAPIKey, apiKey)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ApiKey,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateProject = `-- name: UpdateProject :exec
UPDATE projects SET name = ?, color = ?
WHERE id = ?
`

type UpdateProjectParams struct {
	Name  string
	Color string
	ID    string
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) error {
	_, err := q.db.ExecContext(ctx, updateProject, arg.Name, arg.Color, arg.ID)
	return err
}

const updateTask = `-- name: UpdateTask :exec
UPDATE tasks SET title = ?, content = ?, priority = ?, due_on = ?
WHERE id = ?
`

type UpdateTaskParams struct {
	Title    string
	Content  string
	Priority uint32
	DueOn    sql.NullTime
	ID       string
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) error {
	_, err := q.db.ExecContext(ctx, updateTask,
		arg.Title,
		arg.Content,
		arg.Priority,
		arg.DueOn,
		arg.ID,
	)
	return err
}
